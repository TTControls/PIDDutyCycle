//_01_Control 
//_04_PID
//Used to control a discrete output with PWM from PID in respect to a duration of time.
//
//Software Changes:
//071520	TJT		Block creation
//_____________________________________________________________________________________________________________________________________________________________
//Notes:
//PID Control
//This is a test aplication for pidpwm control
//

//Time functions for cycle
//Ramp duration		(|(SP-PV)|/dt)*Sec/Min*mSec/Sec
tonr(PID.tRamp);
PID.tRamp.PRE 		:= abs((PID.rSetpoint - PID.rProcessVariable))/PID.rRamp*60*1000;
//Time ouput is on at 100%
tonr(PID.tDutyCycle);
PID.tDutyCycle.PRE	:= PID.rDutyCycle * 1000;

//Keeps from dividing by zero.
if 
	PID.rRamp = 0
then
	PID.rRamp := .01;
end_if;
//Enable Control
if
	PID.bEnable
then
	PID.rProportionalGain	:= 1;
	PID.rIntegralGain		:= 1;
	PID.rDerivativeGain		:= 1;
	PID.tRamp.TimerEnable 	:= 1;
	PID.tRamp.Reset 		:= 0;
else
	PID.rProportionalGain	:= 0;
	PID.rIntegralGain		:= 0;
	PID.rDerivativeGain		:= 0;
	PID.tRamp.TimerEnable 	:= 0;
	PID.tRamp.Reset 		:= 1;
end_if;

//Duty cycle time loop
if
	PID.bEnable and not PID.tDutyCycle.DN
then
	PID.tDutyCycle.TimerEnable	:= 1;
	PID.tDutyCycle.Reset 		:= 0;
else
	PID.tDutyCycle.TimerEnable	:= 0;
	PID.tDutyCycle.Reset 		:= 1;
end_if;

//Proportional
//Proportional Term		P=Kp*error*(dx/dt)
PID.rProportionalTerm 	:= PID.rProportionalGain * (PID.rSetpoint - PID.rProcessVariable) * (PID.tRamp.ACC/PID.tRamp.PRE);

//Integral
//Integrator			Sets integral limits or I=I+error*(dx/dt)
if
	PID.rIntegrator > PID.rIntegratorMax
then
	PID.rIntegrator		:= PID.rIntegratorMax;
elsif
	PID.rIntegrator < PID.rIntegratorMin
then
	PID.rIntegrator		:= PID.rIntegratorMin;
else
	PID.rIntegrator		:= (PID.rIntegrator + (PID.rSetpoint - PID.rProcessVariable));
end_if;
//Integral Term			Ki*(I=I+error*(dx/dt))
PID.rIntegralTerm 		:= PID.rIntegralGain * PID.rIntegrator * (PID.tRamp.ACC/PID.tRamp.PRE);

//Derivative
//Derivative Term		Kd*(pv2-pv1)*(dx/dt)
PID.rDerivativeTerm		:= (PID.rDerivativeGain * (PID.rDeviation - PID.rProcessVariable)) * (PID.tRamp.ACC/PID.tRamp.PRE);
//Deviation from line above
PID.rDeviation			:= PID.rProcessVariable;

//Limit saturation or calculate Control Variable
if
	PID.rControlVariable > 100
then
	PID.rControlVariable := 100;
elsif
	PID.rControlVariable < 0
then
	PID.rControlVariable := 0;
else
	PID.rControlVariable := PID.rProportionalTerm + PID.rIntegralTerm + PID.rDerivativeTerm;
end_if;

//Duty Cycle
//Scale PID span with ducty cycle duration (dt-0)/(100-0)*CV
PID.rDutyCycleON :=	((PID.tDutyCycle.PRE - 0)/(100 - 0) * 
					PID.rControlVariable) + 
					(0 - (((PID.tDutyCycle.PRE - 0)/(100 - 0)) * 0));
					
PID.bControlOutput := PID.tDutyCycle.ACC < PID.rDutyCycleON;
